name: Update LeetCode Progress

on:
  schedule:
    - cron: "0 8 * * *"  # Runs every day at 8 AM UTC
  workflow_dispatch:  # Allows manual trigger

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: pip install requests

      - name: Fetch LeetCode Progress and Debug Log
        run: |
          python <<EOF
          import requests
          import datetime

          LEETCODE_USERNAME = "raziord2717"

          def fetch_solved_problems():
              url = f"https://leetcode-stats-api.herokuapp.com/{LEETCODE_USERNAME}"
              response = requests.get(url)
              
              print(f"📡 Fetching LeetCode Data from {url}")
              print(f"🔄 API Response Code: {response.status_code}")

              if response.status_code != 200:
                  print(f"❌ API Fetch Failed. Status Code: {response.status_code}")
                  exit(1)

              data = response.json()
              print("✅ API Data:", data)  # Debug log to see fetched values
              return data

          leetcode_data = fetch_solved_problems()
          last_updated = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

          with open("README.md", "r") as file:
              readme_template = file.read()

          replacements = {
              "{{total_solved}}": str(leetcode_data.get("totalSolved", "0")),
              "{{total_questions}}": str(leetcode_data.get("totalQuestions", "0")),
              "{{easy_solved}}": str(leetcode_data.get("easySolved", "0")),
              "{{total_easy}}": str(leetcode_data.get("totalEasy", "0")),
              "{{medium_solved}}": str(leetcode_data.get("mediumSolved", "0")),
              "{{total_medium}}": str(leetcode_data.get("totalMedium", "0")),
              "{{hard_solved}}": str(leetcode_data.get("hardSolved", "0")),
              "{{total_hard}}": str(leetcode_data.get("totalHard", "0")),
              "{{last_updated}}": last_updated
          }

          for key, value in replacements.items():
              print(f"🔄 Replacing {key} with {value}")
              readme_template = readme_template.replace(key, value)

          with open("README.md", "w") as file:
              file.write(readme_template)

          print("✅ README.md Updated Successfully!")
          EOF

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add README.md

          # Check if there are changes before committing
          if git diff --cached --exit-code; then
            echo "✅ No changes detected. Skipping commit."
          else
            echo " " >> README.md  # Force a minor update to ensure commit
            git commit -am "🔄 Auto-update LeetCode progress"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/Charanbyreddy/Leetcode-Progress.git main
          fi
