name: Auto-Update LeetCode Progress

on:
  schedule:
    - cron: "0 */6 * * *"  # Runs every 6 hours
  workflow_dispatch:  # Allows manual trigger

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: pip install requests

      - name: Fetch LeetCode Progress and Update README
        run: |
          python <<EOF
          import requests
          import datetime
          import re
          import sys
          import time

          LEETCODE_USERNAME = "raziord2717"
          README_FILE = "README.md"

          def fetch_solved_problems():
              url = "https://leetcode.com/graphql"
              query = {
                  "query": """
                  query getUserProfile($username: String!) {
                      matchedUser(username: $username) {
                          submitStats {
                              acSubmissionNum {
                                  count
                                  difficulty
                              }
                          }
                      }
                  }
                  """,
                  "variables": {"username": LEETCODE_USERNAME}
              }

              headers = {"Content-Type": "application/json"}
              for attempt in range(5):  # Retry up to 5 times if API fails
                  response = requests.post(url, json=query, headers=headers)
                  print(f"📡 Attempt {attempt+1}: Fetching LeetCode Data from {url}")
                  print(f"🔄 API Response Code: {response.status_code}")

                  if response.status_code == 200:
                      data = response.json()
                      user_data = data.get("data", {}).get("matchedUser", {}).get("submitStats", {}).get("acSubmissionNum", [])
                      if not user_data:
                          print("❌ No data received from LeetCode API")
                          sys.exit(1)

                      return {
                          "totalSolved": user_data[0]["count"],
                          "easySolved": user_data[1]["count"],
                          "mediumSolved": user_data[2]["count"],
                          "hardSolved": user_data[3]["count"],
                      }
                  
                  print("⚠️ Retrying in 5 seconds...")
                  time.sleep(5)  # Wait before retrying

              print("❌ API Fetch Failed after 5 attempts. Skipping update.")
              sys.exit(0)  # Exit gracefully if API fails

          # Fetch latest LeetCode data
          leetcode_data = fetch_solved_problems()
          last_updated = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

          # Read existing README
          with open(README_FILE, "r") as file:
              readme_content = file.read()

          # Extract current solved problems from README using regex
          match = re.search(r"Total Solved: (\d+)/(\d+)", readme_content)
          current_solved = int(match.group(1)) if match else 0

          new_solved = int(leetcode_data.get("totalSolved", "0"))

          # Only update README if the total solved count has changed
          if new_solved > current_solved:
              replacements = {
                  "{{total_solved}}": str(new_solved),
                  "{{easy_solved}}": str(leetcode_data.get("easySolved", "0")),
                  "{{medium_solved}}": str(leetcode_data.get("mediumSolved", "0")),
                  "{{hard_solved}}": str(leetcode_data.get("hardSolved", "0")),
                  "{{last_updated}}": last_updated
              }

              for key, value in replacements.items():
                  print(f"🔄 Replacing {key} with {value}")
                  readme_content = readme_content.replace(key, value)

              with open(README_FILE, "w") as file:
                  file.write(readme_content)

              print("✅ README.md Updated Successfully!")
              sys.exit(0)  # Exit successfully when update happens
          else:
              print("✅ No new progress detected. Skipping commit.")
              sys.exit(0)  # Exit successfully without committing
          EOF

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md

          # Check if there are changes before committing
          if git diff --cached --quiet; then
            echo "✅ No changes detected. Skipping commit."
            exit 0  # Exit successfully instead of failing
          fi

          git commit -m "🔄 Auto-update LeetCode progress"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/Charanbyreddy/Leetcode-Progress.git main
